class Player1 {
   field int x, y; // screen location of player
   field int size; //and size

/** Constructs and draws a new player with a given location and size. */
   constructor Player1 new(int ax, int ay, int asize) {
      let x = ax;
      let y = ay;
      let size = asize;
      do drawNEW();
      return this;
   }

   /**gets the players's position & size*/
    method int posX() {
        return x;
    }
    method int posY() {
        return y;
    }
    method int sizeOf() {
        return size;
    }

   /** Disposes this player. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

/** draws player */
   method void drawNEW() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress, 21844);
        do Memory.poke(memAddress +32, -1);
        do Memory.poke(memAddress +64, 1);
        do Memory.poke(memAddress +96, 249);
        do Memory.poke(memAddress +128, 137);
        do Memory.poke(memAddress +160, 9369);
        do Memory.poke(memAddress +192, 15609);
        do Memory.poke(memAddress +224, 1);
        do Memory.poke(memAddress +256, -15361);
        do Memory.poke(memAddress +288, 16896);
        do Memory.poke(memAddress +320, -15368);
        do Memory.poke(memAddress +352, 4104);
        do Memory.poke(memAddress +384, 6158);
        do Memory.poke(memAddress +416, 4104);
        do Memory.poke(memAddress +448, 4104);
        do Memory.poke(memAddress +480, 14344);
        do Memory.poke(memAddress +512, 8);
        do Memory.poke(memAddress +544, -8);
        do Memory.poke(memAddress +576, 32);
        do Memory.poke(memAddress +608, 32);
        do Memory.poke(memAddress +640, 32);
        do Memory.poke(memAddress +672, 60);
        do Memory.poke(memAddress +704, 60);
        // column 1
        do Memory.poke(memAddress +1, 85);
        do Memory.poke(memAddress +33, 255);
        do Memory.poke(memAddress +65, 128);
        do Memory.poke(memAddress +97, 159);
        do Memory.poke(memAddress +129, 153);
        do Memory.poke(memAddress +161, 145);
        do Memory.poke(memAddress +193, 159);
        do Memory.poke(memAddress +225, 128);
        do Memory.poke(memAddress +257, 255);
        do Memory.poke(memAddress +321, 31);
        do Memory.poke(memAddress +353, 16);
        do Memory.poke(memAddress +385, 112);
        do Memory.poke(memAddress +417, 16);
        do Memory.poke(memAddress +449, 16);
        do Memory.poke(memAddress +481, 16);
        do Memory.poke(memAddress +513, 16);
        do Memory.poke(memAddress +545, 31);
        do Memory.poke(memAddress +577, 4);
        do Memory.poke(memAddress +609, 4);
        do Memory.poke(memAddress +641, 4);
        do Memory.poke(memAddress +673, 60);
        do Memory.poke(memAddress +705, 60);
        return;
    }

method void eraseNEW() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        do Memory.poke(memAddress +512, 0);
        do Memory.poke(memAddress +544, 0);
        do Memory.poke(memAddress +576, 0);
        do Memory.poke(memAddress +608, 0);
        do Memory.poke(memAddress +640, 0);
        do Memory.poke(memAddress +672, 0);
        do Memory.poke(memAddress +704, 0);
        // column 1
        do Memory.poke(memAddress +1, 0);
        do Memory.poke(memAddress +33, 0);
        do Memory.poke(memAddress +65, 0);
        do Memory.poke(memAddress +97, 0);
        do Memory.poke(memAddress +129, 0);
        do Memory.poke(memAddress +161, 0);
        do Memory.poke(memAddress +193, 0);
        do Memory.poke(memAddress +225, 0);
        do Memory.poke(memAddress +257, 0);
        do Memory.poke(memAddress +321, 0);
        do Memory.poke(memAddress +353, 0);
        do Memory.poke(memAddress +385, 0);
        do Memory.poke(memAddress +417, 0);
        do Memory.poke(memAddress +449, 0);
        do Memory.poke(memAddress +481, 0);
        do Memory.poke(memAddress +513, 0);
        do Memory.poke(memAddress +545, 0);
        do Memory.poke(memAddress +577, 0);
        do Memory.poke(memAddress +609, 0);
        do Memory.poke(memAddress +641, 0);
        do Memory.poke(memAddress +673, 0);
        do Memory.poke(memAddress +705, 0);
        return;
    }

    method void moveLeftNEW() {
        if (x > 35) {
            do eraseNEW();
            let x = x - 2;
            do drawNEW();
        }
        return;
    }

    method void moveRightNEW() {
        if (x < 470) {
            do eraseNEW();
            let x = x + 2;
            do drawNEW();
        }
        return;
    }

    method void moveUpNEW() {
        if (y > 70) {
            do eraseNEW();
            let y = y - 1;
            do drawNEW();
        }
        return;
    }

    method void moveDownNEW() {
        if (y < 220) {
            do eraseNEW();
            let y = y + 1;
            do drawNEW();
        }
        return;
    }
}